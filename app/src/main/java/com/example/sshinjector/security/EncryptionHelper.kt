package com.example.sshinjector.security

import android.security.keystore.KeyGenParameterSpec
import android.security.keystore.KeyProperties
import java.security.KeyStore
import javax.crypto.Cipher
import javax.crypto.KeyGenerator
import javax.crypto.SecretKey
import javax.crypto.spec.GCMParameterSpec

object EncryptionHelper {

    private const val ANDROID_KEYSTORE = "AndroidKeyStore"
    private const val AES_MODE = "AES/GCM/NoPadding" // Recommended mode
    private const val KEY_ALIAS_PREFIX = "ssh_cred_key_"
    private const val FIXED_IV_ALIAS_PREFIX = "ssh_cred_iv_" // Keystore doesn't store IVs with keys for AES/GCM

    // Note: For production, IV should be unique per encryption and stored alongside ciphertext.
    // For simplicity here, we'll generate a fixed IV per alias for Keystore storage if needed,
    // but ideally, IV is generated during encryption and stored with the data.
    // Let's refine this: encryptedCredentialP1 will be ciphertext, encryptedCredentialP2 will be IV.

    private fun getSecretKey(alias: String): SecretKey {
        val keyStore = KeyStore.getInstance(ANDROID_KEYSTORE)
        keyStore.load(null)

        keyStore.getKey(alias, null)?.let { return it as SecretKey }

        val keyGenParameterSpec = KeyGenParameterSpec.Builder(
            alias,
            KeyProperties.PURPOSE_ENCRYPT or KeyProperties.PURPOSE_DECRYPT
        ).setBlockModes(KeyProperties.BLOCK_MODE_GCM)
            .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)
            .setKeySize(256) // AES-256
            .build()

        val keyGenerator = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, ANDROID_KEYSTORE)
        keyGenerator.init(keyGenParameterSpec)
        return keyGenerator.generateKey()
    }

    fun encryptData(aliasSuffix: String, data: String): Pair<ByteArray, ByteArray> { // Pair: Ciphertext, IV
        val secretKey = getSecretKey(KEY_ALIAS_PREFIX + aliasSuffix)
        val cipher = Cipher.getInstance(AES_MODE)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey)
        // IV is generated by the cipher during init(ENCRYPT_MODE) for GCM if not provided
        val iv = cipher.iv // Retrieve the generated IV
        val encryptedData = cipher.doFinal(data.toByteArray(Charsets.UTF_8))
        return Pair(encryptedData, iv)
    }

    fun decryptData(aliasSuffix: String, encryptedData: ByteArray, iv: ByteArray): String {
        val secretKey = getSecretKey(KEY_ALIAS_PREFIX + aliasSuffix)
        val cipher = Cipher.getInstance(AES_MODE)
        val spec = GCMParameterSpec(128, iv) // 128 is the GCM tag length (bits)
        cipher.init(Cipher.DECRYPT_MODE, secretKey, spec)
        val decryptedBytes = cipher.doFinal(encryptedData)
        return String(decryptedBytes, Charsets.UTF_8)
    }
}
