name: Android CI/CD Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle
      # This command will build your project and create an unsigned release APK.
      # Ensure your project has a `gradlew` file and is configured to build a release APK.
      run: ./gradlew assembleRelease

    - name: Sign APK
      id: sign_apk
      uses: r0adkll/sign-android-release@v1
      # You must create these secrets in your repository settings
      with:
        releaseDirectory: app/build/outputs/apk/release 
        signingKeyBase64: ${{ secrets.SIGNING_KEY_STORE_BASE64 }}
        alias: ${{ secrets.KEY_ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}

    - name: Create Release Tag
      id: create_tag
      # This creates a unique tag based on the date and commit hash
      run: echo "tag_name=release-$(date +'%Y%m%d%H%M%S')-$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

    # NOTE: If the 'Create GitHub Release' or 'Upload Release Asset' steps fail with
    # "Error: Resource not accessible by integration", it usually means the default
    # GITHUB_TOKEN does not have sufficient permissions.
    # To resolve this:
    # 1. Check repository settings: Go to Settings > Actions > General > Workflow permissions.
    #    Ensure "Read and write permissions" is selected for GITHUB_TOKEN.
    # 2. If the issue persists, or for more fine-grained control, create a Personal Access Token (PAT)
    #    with 'repo' (or 'public_repo' for public repos) and 'workflow' scopes.
    #    Store this PAT as a secret in the repository (e.g., `RELEASE_PAT`) and
    #    use it in the `env` block for these steps:
    #    env:
    #      GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
    #    Remember that using a PAT grants permissions based on the user who created it.
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
      with:
        tag_name: ${{ steps.create_tag.outputs.tag_name }}
        release_name: Release ${{ steps.create_tag.outputs.tag_name }}
        body: |
          Automated release for commit ${{ github.sha }}.
        draft: false
        prerelease: false

    - name: Upload Release Asset (Signed APK)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        # The signing action outputs the path to the signed APK
        asset_path: ${{ steps.sign_apk.outputs.signedReleaseFile }}
        asset_name: app-release-signed.apk
        asset_content_type: application/vnd.android.package-archive
